@page "/"
@using System.Timers

<style>
    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>

<div class="container">
    <div class="row">
        @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber];
            var uniqueDescription = $"Button #{animalNumber}";

            <div class="col-3">
                <button @onclick="@(() => ButtonClick(animal, uniqueDescription))" type="button" class="btn btn-outline-dark">
                    <h1>@animal</h1>
                </button>
            </div>
        }
    </div>
    <div class="row">
        <h2>Matches Found: @matchesFound</h2>

    </div>
    <div class="row">
        <h2>Time: @timeDisplay</h2>

    </div>
</div>

@code{
    List<string> animalEmoji = new List<string>() {
        "🐶","🐶",
        "🐕","🐕",
        "🐴","🐴",
        "🐪","🐪",
        "🐱","🐱",
        "🐹","🐹"
    };


    List<String> shuffledAnimals = new List<string>();
    int matchesFound = 0;
    Timer timer;
    int tenthsOfSecondsElapsed = 0;
    string timeDisplay;

    protected override void OnInitialized()
    {
        SetupGame();
        tenthsOfSecondsElapsed = 0;
    }

    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;

    private void SetupGame() {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;
        Random random = new Random();
        shuffledAnimals = animalEmoji
            .OrderBy(items => random.Next())
            .ToList();
    }

    private void ButtonClick(String animal, String animalDescription) {
        if (lastAnimalFound == String.Empty){
            lastAnimalFound = animal;

            timer.Start();
        }
        else if ((lastAnimalFound == animal) && (animalDescription != lastDescription)) {
            lastAnimalFound = String.Empty;
            matchesFound++;

            shuffledAnimals = shuffledAnimals
            .Select(a => a.Replace(animal, string.Empty))
            .ToList();
        }
        else {
            lastAnimalFound = string.Empty;
        }

        if (matchesFound == (animalEmoji.Count)/2) {
            timer.Stop();
            timeDisplay += " - Play Again?";
            matchesFound = 0;
            SetupGame();
        }
    }

    private void Timer_Tick(Object source, ElapsedEventArgs e) {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed++;
            timeDisplay = (tenthsOfSecondsElapsed / 10F)
                .ToString("0.0s");
            StateHasChanged();
        }
        );
    }
}
